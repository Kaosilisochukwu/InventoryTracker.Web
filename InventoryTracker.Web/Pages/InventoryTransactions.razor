@page "/transactions"
@using InventoryTracker.Domain.DTOs
@using InventoryTracker.Data.Interfaces
@inject NavigationManager NavigationManager
@inject IInventoryTransactionService transactionService

<div style="display: flex; justify-content: space-between; padding: 15px;">

    <h3>Inventory Transactions</h3>
</div>
@if (isLoading && transctions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (!string.IsNullOrEmpty(Message))
    {
        <p><em style="color:red; font-size: 20px;">@Message</em></p>
    }
    <table class="table">
        <thead>
            <tr>
                <th>Action</th>
                <th>Details</th>
                <th>Quantity</th>
                <th>WareHouse</th>
                <th>Product</th>
                <th>Date Added</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transctions)
            {
                <tr>
                    <td>@transaction.Action.ToString()</td>
                    <td>@transaction.Comments</td>
                    <td>@transaction.Quantity</td>
                    <td>@transaction.WareHouse.Name</td>
                    <td>@transaction.Product.Name</td>
                    <td>@transaction.DateAdded</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                transctions = await transactionService.GetAsync();
                this.isLoading = false;
                this.StateHasChanged();
            }
            catch (Exception ex)
            {
                this.Message = ex.Message;
                StateHasChanged();
            }
        }
    }
    public IEnumerable<InventoryTransactionDTO>? transctions { get; set; }
    public bool isLoading { get; set; } = true;
    public string Message { get; set; }
}
