@page "/products"
@using InventoryTracker.Domain.DTOs
@using InventoryTracker.Data.Interfaces
@inject NavigationManager NavigationManager
@inject IProductService productService

<div style="display: flex; justify-content: space-between; padding: 15px;">

    <h3>Products</h3>
    <button class="btn btn-primary" @onclick="goToProduct">Add</button>
</div>
@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (!string.IsNullOrEmpty(Message))
    {
        <p><em style="color:red; font-size: 20px;">@Message</em></p>
    }
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Unit Price</th>
                <th>Date Added</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in products)
            {
                <tr>
                    <td>@prod.Name</td>
                    <td>@prod.Description</td>
                    <td>@prod.UnitPrice</td>
                    <td>@prod.DateAdded</td>
                    <td><button class="btn btn-primary" @onclick="() => goToEdit(prod.Id)">Edit</button></td>
                    <td><button class="btn btn-danger" @onclick="() => delete(prod.Id)"> Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}
@code {

    public bool isLoading { get; set; } = true;
    public string Message { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                products = await productService.GetAsync();
                this.isLoading = false;
                this.StateHasChanged();
            }
            catch (Exception ex)
            {
                this.Message = ex.Message;
                StateHasChanged();
            }
        }
    }

    void goToProduct()
    {
        NavigationManager.NavigateTo("/product");
    }
    async void delete(int id)
    {
        try
        {
            await productService.DeleteAsync(id);
            products = await productService.GetAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            this.Message = ex.Message;
            StateHasChanged();
        }
    }
    void goToEdit(int id)
    {
        NavigationManager.NavigateTo($"/product/{id}");
    }
    public IEnumerable<ProductDTO>? products { get; set; }
}
